{
  "openapi": "3.0.2",
  "info": {
    "title": "Job Manager",
    "version": "0.1.9"
  },
  "paths": {
    "/jobs/create_job": {
      "post": {
        "summary": "Create Job",
        "description": "Creates ExtractionJob, AnnotationJob or ExtractionWithAnnotationJob.\nIf it is not 'Draft' - runs it",
        "operationId": "create_job_jobs_create_job_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "X-Current-Tenant",
              "type": "string"
            },
            "name": "X-Current-Tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "TenantDependencyDocs": []
          }
        ]
      }
    },
    "/start/{job_id}": {
      "post": {
        "summary": "Run Job",
        "description": "Runs any type of Job",
        "operationId": "run_job_start__job_id__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "integer"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Current-Tenant",
              "type": "string"
            },
            "name": "X-Current-Tenant",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "TenantDependencyDocs": []
          }
        ]
      }
    },
    "/jobs/{job_id}": {
      "get": {
        "summary": "Get Job By Id",
        "description": "Getting hold on a job in the database by its id",
        "operationId": "get_job_by_id_jobs__job_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "integer"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Current-Tenant",
              "type": "string"
            },
            "name": "X-Current-Tenant",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "TenantDependencyDocs": []
          }
        ]
      },
      "put": {
        "summary": "Change Job",
        "description": "Provides an ability to change any value\nof any field of any Job in the database",
        "operationId": "change_job_jobs__job_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "integer"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Current-Tenant",
              "type": "string"
            },
            "name": "X-Current-Tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobParamsToChange"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "TenantDependencyDocs": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Job",
        "description": "Deletes Job instance by its id",
        "operationId": "delete_job_jobs__job_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "integer"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Current-Tenant",
              "type": "string"
            },
            "name": "X-Current-Tenant",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "TenantDependencyDocs": []
          }
        ]
      }
    },
    "/jobs": {
      "get": {
        "summary": "Get All Jobs",
        "description": "Returns a list of all jobs in the database",
        "operationId": "get_all_jobs_jobs_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "X-Current-Tenant",
              "type": "string"
            },
            "name": "X-Current-Tenant",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "TenantDependencyDocs": []
          }
        ]
      }
    },
    "/jobs/search": {
      "post": {
        "summary": "Search Jobs",
        "description": "Returns a list of Jobs in line with filters specified",
        "operationId": "search_jobs_jobs_search_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "X-Current-Tenant",
              "type": "string"
            },
            "name": "X-Current-Tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/_BadgerdocSearch_job_CombinedJob_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "TenantDependencyDocs": []
          }
        ]
      }
    },
    "/metadata": {
      "get": {
        "summary": "Get Metadata",
        "description": "Provides metadata that contains names\nand values of Enum Classes from schemas",
        "operationId": "get_metadata_metadata_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "X-Current-Tenant",
              "type": "string"
            },
            "name": "X-Current-Tenant",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "TenantDependencyDocs": []
          }
        ]
      }
    },
    "/jobs/progress": {
      "post": {
        "summary": "Get Jobs Progress",
        "operationId": "get_jobs_progress_jobs_progress_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "X-Current-Tenant",
              "type": "string"
            },
            "name": "X-Current-Tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Job Ids",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Jobs Progress Jobs Progress Post",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/JobProgress"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "TenantDependencyDocs": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CategoryLinkInput": {
        "title": "CategoryLinkInput",
        "required": [
          "category_id",
          "taxonomy_id",
          "taxonomy_version"
        ],
        "type": "object",
        "properties": {
          "category_id": {
            "title": "Category Id",
            "type": "string",
            "example": "123abc"
          },
          "taxonomy_id": {
            "title": "Taxonomy Id",
            "type": "string",
            "example": "my_taxonomy_id"
          },
          "taxonomy_version": {
            "title": "Taxonomy Version",
            "type": "integer",
            "example": 1
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "JobMode": {
        "title": "JobMode",
        "enum": [
          "Automatic",
          "Manual"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "JobParams": {
        "title": "JobParams",
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/JobType"
          },
          "files": {
            "title": "Files",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "datasets": {
            "title": "Datasets",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "is_draft": {
            "title": "Is Draft",
            "type": "boolean",
            "default": false
          },
          "is_auto_distribution": {
            "title": "Is Auto Distribution",
            "type": "boolean",
            "default": false
          },
          "validation_type": {
            "$ref": "#/components/schemas/ValidationType"
          },
          "annotators": {
            "title": "Annotators",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "owners": {
            "title": "Owners",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/CategoryLinkInput"
                }
              ]
            }
          },
          "deadline": {
            "title": "Deadline",
            "type": "string",
            "format": "date-time"
          },
          "validators": {
            "title": "Validators",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "extensive_coverage": {
            "title": "Extensive Coverage",
            "type": "integer"
          },
          "pipeline_name": {
            "title": "Pipeline Name",
            "type": "string"
          },
          "pipeline_version": {
            "title": "Pipeline Version",
            "type": "string"
          },
          "start_manual_job_automatically": {
            "title": "Start Manual Job Automatically",
            "type": "boolean",
            "default": true
          },
          "import_source": {
            "title": "Import Source",
            "type": "string"
          },
          "import_format": {
            "title": "Import Format",
            "type": "string"
          }
        }
      },
      "JobParamsToChange": {
        "title": "JobParamsToChange",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/JobType"
          },
          "files": {
            "title": "Files",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "datasets": {
            "title": "Datasets",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "is_draft": {
            "title": "Is Draft",
            "type": "boolean"
          },
          "mode": {
            "$ref": "#/components/schemas/JobMode"
          },
          "is_auto_distribution": {
            "title": "Is Auto Distribution",
            "type": "boolean"
          },
          "annotators": {
            "title": "Annotators",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "validators": {
            "title": "Validators",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "owners": {
            "title": "Owners",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/CategoryLinkInput"
                }
              ]
            }
          },
          "deadline": {
            "title": "Deadline",
            "type": "string",
            "format": "date-time"
          },
          "validation_type": {
            "$ref": "#/components/schemas/ValidationType"
          },
          "extensive_coverage": {
            "title": "Extensive Coverage",
            "type": "integer"
          },
          "pipeline_id": {
            "title": "Pipeline Id",
            "type": "integer"
          },
          "import_source": {
            "title": "Import Source",
            "type": "string"
          },
          "import_format": {
            "title": "Import Format",
            "type": "string"
          }
        }
      },
      "JobProgress": {
        "title": "JobProgress",
        "required": [
          "finished",
          "total",
          "mode"
        ],
        "type": "object",
        "properties": {
          "finished": {
            "title": "Finished",
            "type": "integer",
            "example": 1
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "example": 1
          },
          "mode": {
            "title": "Mode",
            "type": "string",
            "example": "Automatic"
          }
        }
      },
      "JobType": {
        "title": "JobType",
        "enum": [
          "ExtractionJob",
          "ExtractionWithAnnotationJob",
          "AnnotationJob",
          "ImportJob"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "Pagination": {
        "title": "Pagination",
        "required": [
          "page_size"
        ],
        "type": "object",
        "properties": {
          "page_num": {
            "title": "Page Num",
            "exclusiveMinimum": 0.0,
            "type": "integer",
            "default": 1
          },
          "page_size": {
            "$ref": "#/components/schemas/_FilterPagesize"
          }
        }
      },
      "Status": {
        "title": "Status",
        "enum": [
          "Pending",
          "In Progress",
          "Failed",
          "Finished",
          "Ready For Annotation",
          "Draft"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "ValidationType": {
        "title": "ValidationType",
        "enum": [
          "cross",
          "hierarchical",
          "validation only",
          "extensive_coverage"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "_BadgerdocSearch_job_CombinedJob_": {
        "title": "_BadgerdocSearch[job_CombinedJob]",
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_Filters_job_CombinedJob_"
            }
          },
          "sorting": {
            "title": "Sorting",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_Sorts_job_CombinedJob_"
            }
          }
        },
        "description": "Abstract base class for generic types.\n\nA generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::\n\n  class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.\n\nThis class can then be used as follows::\n\n  def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default"
      },
      "_FilterOperations": {
        "title": "_FilterOperations",
        "enum": [
          "is_null",
          "is_not_null",
          "eq",
          "ne",
          "gt",
          "lt",
          "ge",
          "le",
          "like",
          "ilike",
          "not_ilike",
          "in",
          "not_in",
          "any",
          "not_any",
          "match",
          "distinct",
          "parent",
          "parents_recursive",
          "children",
          "children_recursive"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "_FilterPagesize": {
        "title": "_FilterPagesize",
        "enum": [
          15,
          30,
          50,
          80,
          100
        ],
        "type": "integer",
        "description": "An enumeration."
      },
      "_Filters_job_CombinedJob_": {
        "title": "_Filters[job_CombinedJob]",
        "required": [
          "field",
          "operator"
        ],
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/job_CombinedJob"
          },
          "operator": {
            "$ref": "#/components/schemas/_FilterOperations"
          },
          "value": {
            "title": "Value"
          }
        }
      },
      "_SortDirection": {
        "title": "_SortDirection",
        "enum": [
          "asc",
          "desc"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "_Sorts_job_CombinedJob_": {
        "title": "_Sorts[job_CombinedJob]",
        "required": [
          "field",
          "direction"
        ],
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/job_CombinedJob"
          },
          "direction": {
            "$ref": "#/components/schemas/_SortDirection"
          }
        }
      },
      "job_CombinedJob": {
        "title": "job_CombinedJob",
        "enum": [
          "id",
          "name",
          "status",
          "files",
          "datasets",
          "creation_datetime",
          "type",
          "mode",
          "annotators",
          "validators",
          "owners",
          "categories",
          "is_auto_distribution",
          "deadline",
          "validation_type",
          "extensive_coverage",
          "pipeline_id",
          "import_source",
          "import_format",
          "start_manual_job_automatically"
        ],
        "type": "string",
        "description": "An enumeration."
      }
    },
    "securitySchemes": {
      "TenantDependencyDocs": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
