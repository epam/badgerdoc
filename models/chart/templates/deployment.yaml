apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  labels:
    app: models
  name: models
  namespace: {{ .Release.Namespace }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: models
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      creationTimestamp: null
      labels:
        app: models
    spec:
      containers:
      - image: {{ .Values.image.registry }}/models:{{ .Values.image.tag }}
        imagePullPolicy: IfNotPresent
        name: models
        resources:
          requests:
            memory: "200Mi"
            cpu: "200m"
          limits:
            memory: "3000Mi"
            cpu: "1000m"
        securityContext:
          privileged: true  # temporary solution for closed infrastructure
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        env:
        - name: MODELS_NAMESPACE
          value: {{ .Release.Namespace }}
        - name: POSTGRES_HOST
          value: "postgres-postgresql"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: models
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: models
              key: POSTGRES_PASSWORD
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "models"
        - name: S3_CREDENTIALS_PROVIDER
          value: "minio"
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: models
              key: MINIO_ACCESS_KEY
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: models
              key: MINIO_SECRET_KEY
        - name: MINIO_HOST
          value: "minio:80"
        - name: SECRET
          value: some_secret_key
        - name: INFERENCE_HOST
          value: "127.0.0.1"
        - name: INFERENCE_PORT
          value: "8000"
        - name: DOCKER_REGISTRY_URL
          value: "818863528939.dkr.ecr.eu-central-1.amazonaws.com"
        - name: ROOT_PATH
          value: ""
        - name: DOMAIN_NAME
          value: badgerdoc.com
        command: ["/bin/sh"]
        args: ["-c", "alembic upgrade head && uvicorn models.main:app --host 0.0.0.0 --port 8080 --root-path /api/v1/models"]
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      serviceAccountName: model-deployer
